services:

  cassandra:
    image: cassandra:5.0
    container_name: cassandra
    ports:
      - "9042:9042"
    # environment:
      # - CASSANDRA_USER=andra
      # - CASSANDRA_PASSWORD=andra
    # environment:
    #   - CASSANDRA_CLUSTER_NAME=SeaweedFSCluster
    healthcheck:
      test: cqlsh -u cassandra -p cassandra "127.0.0.1" < /dev/null #"[ $(nodetool statusgossip) = running ]"
      interval: 30s
      timeout: 20s
      retries: 10
    # volumes:
      # - cassandra-data:/var/lib/cassandra
    networks:
      - project-network
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '0.50'
    #       memory: 3G

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    networks:
      - project-network
    depends_on:
      kafka:
        condition: service_healthy
      cassandra:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    volumes:
      # - backend:/sqlite3
      - ./backend/tests:/app/tests
      - ./backend/app:/app/app
      - ./backend/backend:/app/backend
      - ./backend/tweets:/app/tweets
      - ./backend/logs:/app/logs
      - ./backend/requirements.txt:/app/requirements.txt
      - ./backend/manage.py:/app/manage.py
      - ./backend/__init__.py:/app/__init__.py
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '1.00'
    #       memory: 2G

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    networks:
      - project-network
    volumes:
      - ./frontend/src:/app/src
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '0.50'
    #       memory: 1G

  elasticsearch:
    image:  docker.elastic.co/elasticsearch/elasticsearch:8.13.0
    container_name: elasticsearch
    healthcheck:
      test: curl -s http://elasticsearch:9200 >/dev/null
      interval: 10s
      timeout: 20s
      retries: 24
    environment:
      - CLI_JAVA_OPTS=-Xms2g -Xmx2g
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - xpack.security.enabled=false
      # - xpack.security.enrollment.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - project-network
    # volumes:
    #   - elasticsearch-data:/usr/share/elasticsearch/data
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '0.50'
    #       memory: 2G
        
  seaweedfsmaster:
    image: chrislusf/seaweedfs:3.71
    ports:
      - 9333:9333
      - 19333:19333
      - 9324:9324
    command: "master -ip=seaweedfsmaster -ip.bind=0.0.0.0 -metricsPort=9324"
    networks:
      - project-network
  
  seaweedfsvolume:
    image: chrislusf/seaweedfs:3.71
    ports:
      - 8080:8080
      - 18080:18080
      - 9325:9325
    command: 'volume -mserver="seaweedfsmaster:9333" -ip.bind=0.0.0.0 -port=8080  -metricsPort=9325'
    depends_on:
      - seaweedfsmaster
    networks:
      - project-network

  seaweedfsfiler:
    image: chrislusf/seaweedfs:3.71
    ports:
      - 8888:8888
      - 18888:18888
      - 9326:9326
      - 8333:8333
    command: 'filer -s3 -master="seaweedfsmaster:9333" -ip.bind=0.0.0.0 -metricsPort=9326'
    tty: true
    stdin_open: true
    healthcheck:
      test: wget --header='Content-Type:application/json' http://localhost:8888 -O /tmp/index.html
      interval: 30s
      timeout: 20s
      retries: 10
    depends_on:
      cassandra:
        condition: service_healthy
      seaweedfsmaster:
        condition: service_started
      seaweedfsvolume:
        condition: service_started
    # volumes:
    #   - ./backend/tweets/filer.toml:/etc/seaweedfs/filer.toml
    networks:
      - project-network
        
  kafka:
    image: apache/kafka:3.8.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
      # - "9094:9094"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093 #,EXTERNAL://:9094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092 #,EXTERNAL://localhost:9094 # TODO 3
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT #,EXTERNAL:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_CREATE_TOPICS: "follow_notification:1:1," # TODO 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'         # TODO 0

    healthcheck:
      test: echo ${KAFKA_AUTO_CREATE_TOPICS_ENABLE}
      interval: 30s
      timeout: 20s
      retries: 10
    networks:
      - project-network
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '0.50'
    #       memory: 2G
      
  nginx:
    image: nginx:1.27.0-perl
    ports:
      - "1234:1234"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - project-network
    depends_on:
      seaweedfsfiler:
        condition: service_healthy
      backend:
        condition: service_started
  
# volumes:
  # cassandra-data:
  # backend:
  # elasticsearch-data:

networks:
  project-network:
    driver: bridge
    ipam:
     config:
       - subnet: 10.0.0.0/28
         gateway: 10.0.0.1